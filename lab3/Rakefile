require 'fileutils'
require 'csv'
require 'rake/clean'

RESULTS_DIR = 'results'

task :default => ['report.pdf']

task :clobber do
  sh 'latexmk -C'
  rm 'stateborderstimes.tex'
end

file 'report.pdf' => ['report.tex', 'stateborderstimes.tex'] do
  sh 'latexmk report.tex'
end

rule 'times.tex' => proc {|name| File.join(RESULTS_DIR, File.basename(name, 'times.tex'))} do |t|
  filename = File.basename t.name
  data = get_data t.source

  p data[:results]
  open(t.name, 'w') do |io|
    io.puts "\\runsummary{#{data[:loadtime]}}{#{data[:runtime]}}{#{data[:iter_count]}}"
    data[:results].take(25).each do |result|
      io.puts'\result' + "{#{result[:name]}}{#{result[:rank]}}{#{result[:delt]}}"
    end
  end
end

sources = %w[amazon0505 dolphins karate lesmis NCAA_football p2p-Gnutella05 polblogs soc-LiveJournal1 soc-sign-Slashdot081106 stateborders wiki-Vote]

file "graphdata.csv" do |t|
  CSV.open(t.name, 'w') do |csv|
    sources.each do |source|
      data = get_data File.join('results', source)
      csv << [source, data[:node_estimate], data[:runtime]]
    end
  end
end

def get_data source
  data = {results: []}
  open(source) do |io|
    io.each do |line|
      case line
      when /^Nodes: (\d+)$/
        data[:node_estimate] = $~[1]
      when /^Load Time: ([\d.]+)$/
        data[:loadtime] = $~[1]
      when /^Converged! after (\d+) iter/
        data[:iter_count] = $~[1]
      when /^Run Time: ([\d.]+)$/
        data[:runtime] = $~[1]
      when /^(.+)\s+(.+)\s+\((.+)\)\s*/
        if data[:results].size < 100
          data[:results] << {name: $~[1],
                             rank: $~[2],
                             delt: $~[3]}
        end
      else
        p line
      end
    end
  end

  data
end

task :recalculate_data do
  calculate 'data/stateborders.csv'
  calculate 'data/dolphins.csv'
  calculate 'data/karate.csv'
  calculate 'data/lesmis.csv', true
  calculate 'data/NCAA_football.csv', true
  calculate 'data/polblogs.csv'

  calculate 'snapData/p2p-Gnutella05.txt'
  calculate 'snapData/wiki-Vote.txt'
  calculate 'snapData/soc-sign-Slashdot081106.txt', true
  calculate 'snapData/amazon0505.txt'
  calculate 'snapData/soc-LiveJournal1.txt'
end

def calculate file, weighted=false
  puts "Running calculations on #{file}"
  ext = File.extname file
  case ext
  when '.csv'
    format = 'csv'
  when '.txt'
    format = 'snap'
  else
    raise "Unknown extension " + ext
  end
  
  result = File.join RESULTS_DIR, File.basename(file, ext)
  FileUtils.mkdir_p RESULTS_DIR

  args = %w[--threads 8 --maxiterations 1000000 --epsilon 0.00000001 --batchsize 5000]
  if weighted
    args << '--weighted'
  end

  system './virtual/bin/ranker', *args, '--fmt', format, file, out: result
end
