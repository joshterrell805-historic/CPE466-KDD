require 'fileutils'

RESULTS_DIR = 'results'

task :default => ['report.pdf']

file 'report.pdf' => ['stateborderstimes.tex'] do
  sh 'latexmk report.tex'
end

rule 'times.tex' => proc {|name| File.join(RESULTS_DIR, File.basename(name, 'times.tex'))} do |t|

  data = {}
  open(t.source) do |io|
    io.each do |line|
      case line
      when /^Nodes: (\d+)$/
        data[:node_estimate] = $~[1].to_i
      when /^Load Time: ([\d.]+)$/
        data[:loadtime] = $~[1].to_f
      when /^Converged! after (\d+) iter/
        data[:iter_count] = $~[1].to_i
      when /^Run Time: ([\d.]+)$/
        data[:runtime] = $~[1].to_f
      when /Outdegree:/
        break
      end
    end

    data[:results] = io.readlines.join
  end

  p data
end

task :recalculate_data do
  calculate 'data/stateborders.csv'
  calculate 'data/dolphins.csv'
  calculate 'data/karate.csv'
  calculate 'data/lesmis.csv'
  calculate 'data/NCAA_football.csv', true
  calculate 'data/polblogs.csv'

  calculate 'snapData/p2p-Gnutella05.txt'
  calculate 'snapData/wiki-Vote.txt'
  calculate 'snapData/soc-sign-Slashdot081106.txt', true
  calculate 'snapData/amazon0505.txt'
  calculate 'snapData/soc-LiveJournal1.txt'
end

def calculate file, weighted=false
  puts "Running calculations on #{file}"
  ext = File.extname file
  case ext
  when '.csv'
    format = 'csv'
  when '.txt'
    format = 'snap'
  else
    raise "Unknown extension " + ext
  end
  
  result = File.join RESULTS_DIR, File.basename(file, ext)
  FileUtils.mkdir_p RESULTS_DIR

  args = %w[--threads 8 --maxiterations 1000000 --epsilon 0.00000001 --batchsize 5000]
  if weighted
    args << '--weighted'
  end

  system './virtual/bin/ranker', *args, '--fmt', format, file, out: result
end
